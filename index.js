// Bot's Browser ‚Äì SAFE MOUNT VERSION
// - ‡πÇ‡∏ä‡∏ß‡πå‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏≠‡∏¢ (FAB) ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ~1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
// - ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏õ‡∏∞‡∏ö‡∏ô toolbar ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö host ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á (‡πÉ‡∏ä‡πâ MutationObserver)
// - ‡∏Å‡∏î Alt+B ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î ‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠
// - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏∂‡πà‡∏á‡∏û‡∏≤ DOM ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ò‡∏µ‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏¥‡πà‡∏° (‡∏•‡∏î‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏õ‡∏∏‡πà‡∏°)

(function () {
  // ===================== CONFIG =====================
  const LOG = true; // ‡∏ï‡∏±‡πâ‡∏á true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π log ‡πÉ‡∏ô Console
  const HOTKEY = { altKey: true, key: "b" }; // Alt+B toggle overlay

  // ===================== DATA =====================
  const searchTopics = {
    date: {
      keywords: ['‡πÄ‡∏î‡∏ó', '‡∏ô‡∏±‡∏î', '‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', '‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏á', '‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß', '‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô'],
      queries: [
        '‡∏ß‡∏¥‡∏ò‡∏µ‡∏û‡∏¥‡∏™‡∏π‡∏à‡∏ô‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡πÉ‡∏´‡πâ‡πÅ‡∏ü‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏ä‡∏π‡πâ',
        '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏ó‡πÇ‡∏£‡πÅ‡∏°‡∏ô‡∏ï‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û',
        '‡∏°‡∏∏‡∏Å‡∏à‡∏µ‡∏ö‡πÅ‡∏ü‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏¥‡∏ô‡πÜ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏ô',
        '‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÑ‡∏õ‡πÄ‡∏î‡∏ó‡∏¢‡∏±‡∏á‡πÑ‡∏á‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏î‡∏µ',
        '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏ó‡πÅ‡∏£‡∏Å'
      ]
    },
    food: {
      keywords: ['‡∏Å‡∏¥‡∏ô‡∏≠‡∏∞‡πÑ‡∏£', '‡∏´‡∏¥‡∏ß', '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£', '‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£', '‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô', '‡∏™‡∏π‡∏ï‡∏£'],
      queries: [
        '‡∏™‡∏π‡∏ï‡∏£‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á‡∏£‡∏™‡πÄ‡∏î‡πá‡∏î‡∏ó‡∏≥‡∏á‡πà‡∏≤‡∏¢',
        '‡∏£‡πâ‡∏≤‡∏ô‡∏ö‡∏∏‡∏ü‡πÄ‡∏ü‡πà‡∏ï‡πå‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏â‡∏±‡∏ô',
        '‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏ä‡πá‡∏≠‡∏Å‡πÇ‡∏Å‡πÅ‡∏•‡∏ï‡∏•‡∏≤‡∏ß‡∏≤',
        '10 ‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏¢‡πá‡∏ô‡∏ó‡∏≥‡πÄ‡∏≠‡∏á',
        '‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà‡∏Ç‡∏ô‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡πÜ'
      ]
    },
    travel: {
      keywords: ['‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', '‡∏ó‡∏∞‡πÄ‡∏•', '‡∏†‡∏π‡πÄ‡∏Ç‡∏≤', '‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô', '‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á', '‡∏ó‡∏£‡∏¥‡∏õ'],
      queries: [
        '‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å‡∏ï‡∏¥‡∏î‡∏ó‡∏∞‡πÄ‡∏•‡∏ß‡∏¥‡∏ß‡∏™‡∏ß‡∏¢‡πÜ',
        '‡πÅ‡∏û‡∏•‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà 3 ‡∏ß‡∏±‡∏ô 2 ‡∏Ñ‡∏∑‡∏ô',
        '‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏õ‡πÅ‡∏Ñ‡∏°‡∏õ‡πå‡∏õ‡∏¥‡πâ‡∏á',
        '‡∏ß‡∏¥‡∏ò‡∏µ‡∏à‡∏±‡∏î‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î',
        '‡πÄ‡∏Å‡∏≤‡∏∞‡∏™‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡πÉ‡∏™‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏¢‡∏≠‡∏∞'
      ]
    },
    default: {
      keywords: [],
      queries: [
        '‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏ä‡∏ó‡∏™‡∏ô‡∏∏‡∏Å‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏ö‡∏∑‡πà‡∏≠',
        '‡∏Ñ‡∏≥‡∏Ñ‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏ö‡∏≤‡∏î‡πÉ‡∏à',
        '‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏•‡∏Å‡∏™‡∏±‡πâ‡∏ô‡πÜ',
        '‡∏ß‡∏¥‡∏ò‡∏µ‡∏û‡∏π‡∏î‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢',
        '‡πÄ‡∏û‡∏•‡∏á‡∏ü‡∏±‡∏á‡∏™‡∏ö‡∏≤‡∏¢‡πÜ'
      ]
    }
  };

  // ===================== UTIL =====================
  const qs = (s, r = document) => r.querySelector(s);
  const log = (...a) => LOG && console.log("[BotBrowser]", ...a);
  const warn = (...a) => LOG && console.warn("[BotBrowser]", ...a);

  // ===================== OVERLAY =====================
  function ensureOverlay() {
    if (qs('#bot-search-overlay')) return;

    const overlay = document.createElement('div');
    overlay.id = 'bot-search-overlay';
    overlay.innerHTML = `
      <div class="phone-screen" role="dialog" aria-modal="true" aria-label="Bot Browser">
        <div class="phone-header">
          <span class="title">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Ç‡∏≠‡∏á ‡∏´‡∏•‡∏µ‡πà ‡πÄ‡∏à‡∏µ‡∏¢‡∏´‡πà‡∏≤‡∏ß</span>
          <button class="close-btn" aria-label="Close" title="Close">√ó</button>
        </div>
        <div class="browser-ui">
          <div class="browser-header"><span class="back-arrow">„Ñë</span><span>‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå</span></div>
          <div class="browser-icon-container">
            <div class="browser-icon"><i class="fa-regular fa-compass compass"></i></div>
          </div>
          <div class="search-bar"><i class="fa-solid fa-magnifying-glass"></i><span>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</span></div>
          <div class="search-history-list" id="bot-search-history"></div>
        </div>
      </div>
    `;
    document.body.appendChild(overlay);

    overlay.addEventListener('click', (e) => { if (e.target.id === 'bot-search-overlay') hideOverlay(); });
    overlay.querySelector('.close-btn').addEventListener('click', hideOverlay);
    document.addEventListener('keydown', (e) => { if (e.key === 'Escape') hideOverlay(); });

    log("Overlay created");
  }

  function hideOverlay() {
    const ov = qs('#bot-search-overlay');
    if (ov) ov.style.display = 'none';
  }

  function renderAndShowOverlay() {
    ensureOverlay();

    // ‡∏î‡∏∂‡∏á‡πÅ‡∏ä‡∏ó‡∏à‡∏≤‡∏Å SillyTavern ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ; ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏û‡∏±‡∏á
    let chatText = "";
    try {
      const ctx = (typeof SillyTavern !== "undefined") ? SillyTavern.getContext() : null;
      const last4 = ctx?.chat ? ctx.chat.slice(-4) : [];
      chatText = last4.map(m => m?.mes || '').join(' ');
    } catch {
      // ‡πÄ‡∏á‡∏µ‡∏¢‡∏ö ‡πÜ ‡∏Å‡πá‡πÑ‡∏î‡πâ
    }

    let key = 'default';
    for (const k of Object.keys(searchTopics)) {
      if (k === 'default') continue;
      if (searchTopics[k].keywords.some(word => chatText.includes(word))) { key = k; break; }
    }

    const list = qs('#bot-search-history');
    if (list) {
      list.innerHTML = '';
      for (const q of searchTopics[key].queries) {
        const item = document.createElement('div');
        item.className = 'search-history-item';
        item.textContent = q;
        list.appendChild(item);
      }
    }

    const ov = qs('#bot-search-overlay');
    if (ov) ov.style.display = 'flex';
  }

  // ===================== BUTTONS =====================
  function mountFAB() {
    if (qs('#bot-browser-fab')) return;
    const fab = document.createElement('button');
    fab.id = 'bot-browser-fab';
    fab.title = '‡∏î‡∏π‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó (Alt+B)';
    fab.textContent = 'üì±';
    Object.assign(fab.style, {
      position: 'fixed',
      right: '16px',
      bottom: '96px',
      width: '48px',
      height: '48px',
      borderRadius: '24px',
      border: 'none',
      fontSize: '22px',
      cursor: 'pointer',
      zIndex: 2000,
      background: '#fff',
      boxShadow: '0 6px 18px rgba(0,0,0,.25)'
    });
    fab.addEventListener('click', renderAndShowOverlay);
    document.body.appendChild(fab);
    log("FAB mounted");
  }

  function findToolbarHost() {
    // ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ò‡∏µ‡∏°/‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô
    const candidates = [
      '#extensions_buttons',
      '#extensions-buttons',
      '.extensions-buttons',
      '#quick_extensions',
      '#extensions_panel',
      '#top_bar .extensions',
      '#navbar .extensions'
    ];
    for (const sel of candidates) {
      const el = qs(sel);
      if (el) return el;
    }
    return null;
  }

  function mountToolbarButton() {
    if (qs('#bot-browser-button')) return;

    const host = findToolbarHost();
    if (!host) return warn("Toolbar not found yet");

    const btn = document.createElement('div');
    btn.id = 'bot-browser-button';
    btn.className = 'fa-solid fa-mobile-screen-button custom-icon';
    btn.title = '‡∏î‡∏π‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó (Alt+B)';
    btn.setAttribute('role', 'button');
    btn.tabIndex = 0;
    btn.addEventListener('click', renderAndShowOverlay);
    btn.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); renderAndShowOverlay(); }
    });
    host.appendChild(btn);
    log("Toolbar button mounted on", host);
  }

  // ===================== BOOT =====================
  // 1) ‡∏™‡∏£‡πâ‡∏≤‡∏á FAB ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ (‡∏Å‡∏±‡∏ô‡∏û‡∏•‡∏≤‡∏î)
  if (document.readyState !== 'loading') setTimeout(mountFAB, 800);
  else document.addEventListener('DOMContentLoaded', () => setTimeout(mountFAB, 800));

  // 2) ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏õ‡∏∞‡∏ö‡∏ô toolbar ‡∏ã‡πâ‡∏≥ ‡πÜ + ‡πÉ‡∏ä‡πâ MutationObserver ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏à‡∏≠
  function tryMountToolbar(retry = 15) {
    mountToolbarButton();
    if (!qs('#bot-browser-button') && retry > 0) {
      setTimeout(() => tryMountToolbar(retry - 1), 500);
    }
  }
  tryMountToolbar();

  const mo = new MutationObserver(() => {
    if (!qs('#bot-browser-button')) mountToolbarButton();
  });
  mo.observe(document.documentElement, { childList: true, subtree: true });

  // 3) Hotkey Alt+B
  document.addEventListener('keydown', (e) => {
    const ok = (!!e.altKey === !!HOTKEY.altKey) &&
               (!!e.ctrlKey === !!HOTKEY.ctrlKey) &&
               (!!e.shiftKey === !!HOTKEY.shiftKey) &&
               (e.key.toLowerCase() === HOTKEY.key);
    if (ok) {
      const ov = qs('#bot-search-overlay');
      if (!ov || ov.style.display === 'none' || !ov.style.display) renderAndShowOverlay();
      else hideOverlay();
    }
  });

  log("Extension loaded");
})();      ]
    },
    default: {
      keywords: [],
      queries: [
        '‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏ä‡∏ó‡∏™‡∏ô‡∏∏‡∏Å‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏ö‡∏∑‡πà‡∏≠',
        '‡∏Ñ‡∏≥‡∏Ñ‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏ö‡∏≤‡∏î‡πÉ‡∏à',
        '‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏•‡∏Å‡∏™‡∏±‡πâ‡∏ô‡πÜ',
        '‡∏ß‡∏¥‡∏ò‡∏µ‡∏û‡∏π‡∏î‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢',
        '‡πÄ‡∏û‡∏•‡∏á‡∏ü‡∏±‡∏á‡∏™‡∏ö‡∏≤‡∏¢‡πÜ'
      ]
    }
  };

  // -------------------- Helper --------------------
  const qs = (s, r = document) => r.querySelector(s);

  // -------------------- UI: overlay --------------------
  function createPhoneUI() {
    if (qs('#bot-search-overlay')) return;

    const overlay = document.createElement('div');
    overlay.id = 'bot-search-overlay';
    overlay.innerHTML = `
      <div class="phone-screen" role="dialog" aria-modal="true" aria-label="Bot Browser">
        <div class="phone-header">
          <span class="title">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Ç‡∏≠‡∏á ‡∏´‡∏•‡∏µ‡πà ‡πÄ‡∏à‡∏µ‡∏¢‡∏´‡πà‡∏≤‡∏ß</span>
          <button class="close-btn" aria-label="Close" title="Close">√ó</button>
        </div>
        <div class="browser-ui">
          <div class="browser-header">
            <span class="back-arrow">„Ñë</span>
            <span>‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå</span>
          </div>
          <div class="browser-icon-container">
            <div class="browser-icon">
              <i class="fa-regular fa-compass compass"></i>
            </div>
          </div>
          <div class="search-bar">
            <i class="fa-solid fa-magnifying-glass"></i>
            <span>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</span>
          </div>
          <div class="search-history-list" id="bot-search-history"></div>
        </div>
      </div>
    `;
    document.body.appendChild(overlay);

    overlay.addEventListener('click', (e) => {
      if (e.target.id === 'bot-search-overlay') hidePhoneUI();
    });
    overlay.querySelector('.close-btn').addEventListener('click', hidePhoneUI);
    document.addEventListener('keydown', (e) => { if (e.key === 'Escape') hidePhoneUI(); });
  }

  function hidePhoneUI() {
    const ov = qs('#bot-search-overlay');
    if (ov) ov.style.display = 'none';
  }

  function showPhoneUI() {
    const { chat } = SillyTavern.getContext();
    const text = (chat || []).slice(-4).map(m => m?.mes || '').join(' ');

    let key = 'default';
    for (const k of Object.keys(searchTopics)) {
      if (k === 'default') continue;
      if (searchTopics[k].keywords.some(word => text.includes(word))) { key = k; break; }
    }

    const list = qs('#bot-search-history');
    if (list) {
      list.innerHTML = '';
      for (const q of searchTopics[key].queries) {
        const item = document.createElement('div');
        item.className = 'search-history-item';
        item.textContent = q;
        list.appendChild(item);
      }
    }

    const ov = qs('#bot-search-overlay');
    if (ov) ov.style.display = 'flex';
  }

  // -------------------- Mount buttons --------------------
  function findToolbarHost() {
    const candidates = [
      '#extensions_buttons',
      '#extensions-buttons',
      '.extensions-buttons',
      '#quick_extensions',
      '#extensions_panel',
      '#top_bar .extensions',
      '#navbar .extensions'
    ];
    for (const sel of candidates) {
      const el = document.querySelector(sel);
      if (el) return el;
    }
    return null;
  }

  function mountFloatingButton() {
    if (qs('#bot-browser-fab')) return;
    const fab = document.createElement('button');
    fab.id = 'bot-browser-fab';
    fab.title = '‡∏î‡∏π‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó';
    fab.textContent = 'üì±';
    Object.assign(fab.style, {
      position: 'fixed',
      right: '16px',
      bottom: '96px',
      width: '48px',
      height: '48px',
      borderRadius: '24px',
      border: 'none',
      fontSize: '22px',
      cursor: 'pointer',
      zIndex: 2000,
      background: '#fff',
      boxShadow: '0 6px 18px rgba(0,0,0,.25)'
    });
    fab.addEventListener('click', showPhoneUI);
    document.body.appendChild(fab);
  }

  function mountToolbarButton() {
    if (qs('#bot-browser-button')) return;

    const host = findToolbarHost();
    if (host) {
      const btn = document.createElement('div');
      btn.id = 'bot-browser-button';
      btn.className = 'fa-solid fa-mobile-screen-button custom-icon';
      btn.title = '‡∏î‡∏π‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó';
      btn.setAttribute('role', 'button');
      btn.tabIndex = 0;
      btn.addEventListener('click', showPhoneUI);
      btn.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); showPhoneUI(); }
      });
      host.appendChild(btn);
      console.log('[BotBrowser] Mounted on toolbar:', host);
    } else {
      console.warn('[BotBrowser] Toolbar not found, mounting FAB instead');
      mountFloatingButton();
    }
  }

  function tryMountRepeated(times = 10, delay = 400) {
    const run = () => {
      try { createPhoneUI(); mountToolbarButton(); } catch (e) { console.error(e); }
      const ready = qs('#bot-browser-button') || qs('#bot-browser-fab');
      if (!ready && --times > 0) setTimeout(run, delay);
    };
    run();
  }

  // -------------------- Boot --------------------
  try {
    const { eventSource, event_types } = SillyTavern.getContext();
    eventSource.on(event_types.APP_READY, () => tryMountRepeated());
  } catch (e) {
    // ‡∏Å‡∏£‡∏ì‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡πà‡∏≠‡∏ô ST ‡∏û‡∏£‡πâ‡∏≠‡∏°: ‡∏•‡∏≠‡∏á‡πÄ‡∏≠‡∏á
    console.warn('[BotBrowser] getContext not ready yet; using fallback mount', e);
  }
  if (document.readyState !== 'loading') setTimeout(() => tryMountRepeated(), 0);

  console.log("[BotBrowser] extension loaded");
})();    default: {
      keywords: [],
      queries: [
        '‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏ä‡∏ó‡∏™‡∏ô‡∏∏‡∏Å‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏ö‡∏∑‡πà‡∏≠',
        '‡∏Ñ‡∏≥‡∏Ñ‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏ö‡∏≤‡∏î‡πÉ‡∏à',
        '‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏•‡∏Å‡∏™‡∏±‡πâ‡∏ô‡πÜ',
        '‡∏ß‡∏¥‡∏ò‡∏µ‡∏û‡∏π‡∏î‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢',
        '‡πÄ‡∏û‡∏•‡∏á‡∏ü‡∏±‡∏á‡∏™‡∏ö‡∏≤‡∏¢‡πÜ'
      ]
    }
  };

  // ---- DOM helpers ----
  function qs(sel, root = document) { return root.querySelector(sel); }
  function qsa(sel, root = document) { return [...root.querySelectorAll(sel)]; }

  // ---- UI: create overlay (hidden by default) ----
  function createPhoneUI() {
    if (qs('#bot-search-overlay')) return; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥

    const overlay = document.createElement('div');
    overlay.id = 'bot-search-overlay';
    overlay.innerHTML = `
      <div class="phone-screen" role="dialog" aria-modal="true" aria-label="Bot Browser">
        <div class="phone-header">
          <span class="title">‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Ç‡∏≠‡∏á ‡∏´‡∏•‡∏µ‡πà ‡πÄ‡∏à‡∏µ‡∏¢‡∏´‡πà‡∏≤‡∏ß</span>
          <button class="close-btn" aria-label="Close" title="Close">√ó</button>
        </div>
        <div class="browser-ui">
          <div class="browser-header">
            <span class="back-arrow">„Ñë</span>
            <span>‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå</span>
          </div>
          <div class="browser-icon-container">
            <div class="browser-icon">
              <i class="fa-regular fa-compass compass"></i>
            </div>
          </div>
          <div class="search-bar">
            <i class="fa-solid fa-magnifying-glass"></i>
            <span>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</span>
          </div>
          <div class="search-history-list" id="bot-search-history"></div>
        </div>
      </div>
    `;
    document.body.appendChild(overlay);

    // close handlers
    overlay.addEventListener('click', (e) => {
      if (e.target.id === 'bot-search-overlay') hidePhoneUI();
    });
    overlay.querySelector('.close-btn').addEventListener('click', hidePhoneUI);
    document.addEventListener('keydown', escToClose);
  }

  function escToClose(e) {
    if (e.key === 'Escape') hidePhoneUI();
  }

  function hidePhoneUI() {
    const overlay = qs('#bot-search-overlay');
    if (overlay) overlay.style.display = 'none';
  }

  function showPhoneUI() {
    // ‡∏î‡∏∂‡∏á‡πÅ‡∏ä‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å context ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const { chat } = SillyTavern.getContext();
    const chatHistoryText = (chat || []).slice(-4).map(m => m?.mes || '').join(' ');

    // ‡∏´‡∏≤‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà match
    let relevant = 'default';
    for (const topic of Object.keys(searchTopics)) {
      if (topic === 'default') continue;
      const hit = searchTopics[topic].keywords.some(k => chatHistoryText.includes(k));
      if (hit) { relevant = topic; break; }
    }

    // render ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    const list = qs('#bot-search-history');
    if (list) {
      list.innerHTML = '';
      for (const q of searchTopics[relevant].queries) {
        const item = document.createElement('div');
        item.className = 'search-history-item';
        item.textContent = q;
        list.appendChild(item);
      }
    }

    const overlay = qs('#bot-search-overlay');
    if (overlay) overlay.style.display = 'flex';
  }

  // ---- Toolbar button ----
  function mountToolbarButton() {
    if (qs('#bot-browser-button')) return; // ‡∏Å‡∏±‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ã‡πâ‡∏≥

    const btn = document.createElement('div');
    btn.id = 'bot-browser-button';
    btn.className = 'fa-solid fa-mobile-screen-button custom-icon';
    btn.title = '‡∏î‡∏π‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó';
    btn.setAttribute('role', 'button');
    btn.tabIndex = 0;

    btn.addEventListener('click', showPhoneUI);
    btn.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); showPhoneUI(); }
    });

    const holder = qs('#extensions_buttons');
    if (holder) holder.appendChild(btn);
  }

  // ---- Boot: wait for SillyTavern app to be ready ----
  const { eventSource, event_types } = SillyTavern.getContext();
  eventSource.on(event_types.APP_READY, () => {
    createPhoneUI();
    mountToolbarButton();
  });

  // ‡∏ñ‡πâ‡∏≤‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏¢‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß
  if (document.readyState === 'complete' || document.readyState === 'interactive') {
    // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ APP_READY ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≤‡πÜ
    setTimeout(() => { try { createPhoneUI(); mountToolbarButton(); } catch (_) {} }, 0);
  }
})();        // ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î)
        default: {
            keywords: [],
            queries: [
                '‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏ä‡∏ó‡∏™‡∏ô‡∏∏‡∏Å‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏ö‡∏∑‡πà‡∏≠',
                '‡∏Ñ‡∏≥‡∏Ñ‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏ö‡∏≤‡∏î‡πÉ‡∏à',
                '‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏•‡∏Å‡∏™‡∏±‡πâ‡∏ô‡πÜ',
                '‡∏ß‡∏¥‡∏ò‡∏µ‡∏û‡∏π‡∏î‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢',
                '‡πÄ‡∏û‡∏•‡∏á‡∏ü‡∏±‡∏á‡∏™‡∏ö‡∏≤‡∏¢‡πÜ',
            ],
        },
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å)
    function createPhoneUI() {
        const overlay = document.createElement('div');
        overlay.id = 'bot-search-overlay';
        
        overlay.innerHTML = `
            <div class="phone-screen">
                <div class="phone-header">
                    <span>‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Ç‡∏≠‡∏á ‡∏´‡∏•‡∏µ‡πà ‡πÄ‡∏à‡∏µ‡∏¢‡∏´‡πà‡∏≤‡∏ß</span>
                    <span class="close-btn">X</span>
                </div>
                <div class="browser-ui">
                    <div class="browser-header">
                        <span class="back-arrow">„Ñë</span>
                        <span>‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå</span>
                    </div>
                    <div class="browser-icon-container">
                        <div class="browser-icon">
                            <i class="fa-regular fa-compass compass"></i>
                        </div>
                    </div>
                    <div class="search-bar">
                        <i class="fa-solid fa-magnifying-glass"></i>
                        <span>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</span>
                    </div>
                    <div class="search-history-list" id="bot-search-history">
                        </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(overlay);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
        overlay.querySelector('.close-btn').addEventListener('click', hidePhoneUI);
        overlay.addEventListener('click', (event) => {
            if (event.target.id === 'bot-search-overlay') {
                hidePhoneUI();
            }
        });
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ã‡πà‡∏≠‡∏ô UI
    function hidePhoneUI() {
        const overlay = document.getElementById('bot-search-overlay');
        if (overlay) {
            overlay.style.display = 'none';
        }
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á UI ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
    function showPhoneUI() {
        // 1. ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 4 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
        const chatHistory = get_chat_history().slice(-4).map(msg => msg.mes).join(' ');
        
        // 2. ‡∏´‡∏≤‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î
        let relevantTopic = 'default';
        for (const topic in searchTopics) {
            if (topic !== 'default') {
                for (const keyword of searchTopics[topic].keywords) {
                    if (chatHistory.includes(keyword)) {
                        relevantTopic = topic;
                        break;
                    }
                }
            }
            if (relevantTopic !== 'default') break;
        }

        // 3. ‡∏ô‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á
        const searchQueries = searchTopics[relevantTopic].queries;
        const historyList = document.getElementById('bot-search-history');
        historyList.innerHTML = ''; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πà‡∏≤
        searchQueries.forEach(query => {
            const item = document.createElement('div');
            item.className = 'search-history-item';
            item.textContent = query;
            historyList.appendChild(item);
        });

        // 4. ‡πÅ‡∏™‡∏î‡∏á UI
        const overlay = document.getElementById('bot-search-overlay');
        if (overlay) {
            overlay.style.display = 'flex';
        }
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ Extension ‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î
    function onExtensionLoaded() {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏ô‡πÅ‡∏ñ‡∏ö‡πÄ‡∏°‡∏ô‡∏π
        const button = document.createElement('div');
        button.id = 'bot-browser-button';
        button.className = 'fa-solid fa-mobile-screen-button custom-icon'; // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏£‡∏π‡∏õ‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
        button.title = '‡∏î‡∏π‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó';
        
        button.addEventListener('click', showPhoneUI);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô UI
        const extensionsButtons = document.querySelector('#extensions_buttons');
        if (extensionsButtons) {
            extensionsButtons.appendChild(button);
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ (‡πÅ‡∏ï‡πà‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà)
        createPhoneUI();
    }

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    document.addEventListener('DOMContentLoaded', onExtensionLoaded);
})();
